{"ast":null,"code":"var _jsxFileName = \"/Users/siriyalachandu/Documents/GitHub/Event-Task-Scheduler/src/component/tasks/index.js\";\n// import React, { Component } from \"react\";\n// import './index.css';\n// import TaskCard from \"../TaskCard\";\n// import { v4 as uuidv4 } from 'uuid';\n\n// class Task extends Component {\n//     state = {\n//         taskArray: [],\n//         taskText: \"\",\n//         id: uuidv4()\n//     };\n\n//     makeTask = (event) => {\n//         this.setState({ taskText: event.target.value });\n//     };\n\n//     DumpToLocal = (taskArray) => {\n//         localStorage.setItem(\"TaskList\", JSON.stringify(taskArray));\n//     };\n\n//     saveTask = () => {\n//         const { taskArray, id, taskText } = this.state;\n//         const taskDate = new Date();\n//         const taskCreated = taskDate.toLocaleTimeString();\n//         const taskList = {\n//             id,\n//             taskText,\n//             taskCreated\n//         };\n\n//         const updatedTaskArray = [...taskArray, taskList];\n//         this.setState({ taskArray: updatedTaskArray });\n\n//         this.DumpToLocal(updatedTaskArray); // Store to localStorage immediately\n\n//         // Clear input field after saving task\n//         this.setState({ taskText: \"\" });\n\n//     };\n\n//     deleteTask = (taskId) => {\n//         const updatedTaskArray = this.state.taskArray.filter(task => task.id !== taskId);\n//         this.setState({ taskArray: updatedTaskArray });\n//         this.DumpToLocal(updatedTaskArray); // Update localStorage after deleting task\n\n//     };\n\n//     render() {\n//         const parsedList=JSON.parse(localStorage.getItem(\"TaskList\"))\n//         return (\n//             <div className=\"tasks-container\">\n//                 <h1>Task</h1>\n//                 <div className=\"content-3\">\n//                     <input type=\"text\" className=\"input-element\" placeholder=\"Make Tasks..\" value={this.state.taskText} onChange={this.makeTask} />\n//                     <button className=\"taskAdd-btn\" onClick={this.saveTask}>Save</button>\n//                 </div>\n//                 <div className=\"array\">\n//                     {parsedList.map(task => (\n//                         <TaskCard key={task.id} task={task} onDelete={() => this.deleteTask(task.id)} />\n//                     ))}\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n\n// export default Task;\n\nimport React, { Component } from \"react\";\nimport './index.css';\nimport TaskCard from \"../TaskCard\";\nimport { v4 as uuidv4 } from 'uuid';\nimport bg from './icons/bg1.avif';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Task extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      taskArray: [],\n      taskText: \"\"\n    };\n    this.makeTask = event => {\n      this.setState({\n        taskText: event.target.value\n      });\n    };\n    this.DumpToLocal = taskArray => {\n      localStorage.setItem(\"TaskList\", JSON.stringify(taskArray));\n    };\n    this.saveTask = () => {\n      const {\n        taskArray,\n        taskText\n      } = this.state;\n      const taskDate = new Date();\n      const taskCreated = taskDate.toLocaleTimeString();\n      const taskList = {\n        taskText,\n        taskCreated,\n        id: uuidv4()\n      };\n      const updatedTaskArray = [...taskArray, taskList];\n      this.setState({\n        taskArray: updatedTaskArray\n      });\n      this.DumpToLocal(updatedTaskArray); // Store to localStorage immediately\n\n      // Clear input field after saving task\n      this.setState({\n        taskText: \"\"\n      });\n    };\n    this.deleteTask = taskId => {\n      const updatedTaskArray = this.state.taskArray.filter(task => task.id !== taskId);\n      this.setState({\n        taskArray: updatedTaskArray\n      });\n      this.DumpToLocal(updatedTaskArray); // Update localStorage after deleting task\n    };\n  }\n  componentDidMount() {\n    const parsedList = JSON.parse(localStorage.getItem(\"TaskList\"));\n    if (parsedList) {\n      this.setState({\n        taskArray: parsedList\n      });\n    }\n  }\n  render() {\n    const {\n      taskText,\n      taskArray\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-container\",\n      style: {\n        backgroundImage: `url(${bg})`,\n        backgroundSize: \"cover\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input-element\",\n          placeholder: \"Make Tasks.. by using 100 words\",\n          value: taskText,\n          onChange: this.makeTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"taskAdd-btn\",\n          onClick: this.saveTask,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array\",\n        children: taskArray.map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n          task: task,\n          onDelete: () => this.deleteTask(task.id)\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Task;","map":{"version":3,"names":["React","Component","TaskCard","v4","uuidv4","bg","jsxDEV","_jsxDEV","Task","constructor","args","state","taskArray","taskText","makeTask","event","setState","target","value","DumpToLocal","localStorage","setItem","JSON","stringify","saveTask","taskDate","Date","taskCreated","toLocaleTimeString","taskList","id","updatedTaskArray","deleteTask","taskId","filter","task","componentDidMount","parsedList","parse","getItem","render","className","style","backgroundImage","backgroundSize","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","map","onDelete"],"sources":["/Users/siriyalachandu/Documents/GitHub/Event-Task-Scheduler/src/component/tasks/index.js"],"sourcesContent":["\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n// import './index.css';\r\n// import TaskCard from \"../TaskCard\";\r\n// import { v4 as uuidv4 } from 'uuid';\r\n\r\n// class Task extends Component {\r\n//     state = {\r\n//         taskArray: [],\r\n//         taskText: \"\",\r\n//         id: uuidv4()\r\n//     };\r\n\r\n//     makeTask = (event) => {\r\n//         this.setState({ taskText: event.target.value });\r\n//     };\r\n\r\n//     DumpToLocal = (taskArray) => {\r\n//         localStorage.setItem(\"TaskList\", JSON.stringify(taskArray));\r\n//     };\r\n\r\n//     saveTask = () => {\r\n//         const { taskArray, id, taskText } = this.state;\r\n//         const taskDate = new Date();\r\n//         const taskCreated = taskDate.toLocaleTimeString();\r\n//         const taskList = {\r\n//             id,\r\n//             taskText,\r\n//             taskCreated\r\n//         };\r\n\r\n//         const updatedTaskArray = [...taskArray, taskList];\r\n//         this.setState({ taskArray: updatedTaskArray });\r\n\r\n//         this.DumpToLocal(updatedTaskArray); // Store to localStorage immediately\r\n\r\n//         // Clear input field after saving task\r\n//         this.setState({ taskText: \"\" });\r\n\r\n        \r\n//     };\r\n\r\n//     deleteTask = (taskId) => {\r\n//         const updatedTaskArray = this.state.taskArray.filter(task => task.id !== taskId);\r\n//         this.setState({ taskArray: updatedTaskArray });\r\n//         this.DumpToLocal(updatedTaskArray); // Update localStorage after deleting task\r\n        \r\n//     };\r\n\r\n//     render() {\r\n//         const parsedList=JSON.parse(localStorage.getItem(\"TaskList\"))\r\n//         return (\r\n//             <div className=\"tasks-container\">\r\n//                 <h1>Task</h1>\r\n//                 <div className=\"content-3\">\r\n//                     <input type=\"text\" className=\"input-element\" placeholder=\"Make Tasks..\" value={this.state.taskText} onChange={this.makeTask} />\r\n//                     <button className=\"taskAdd-btn\" onClick={this.saveTask}>Save</button>\r\n//                 </div>\r\n//                 <div className=\"array\">\r\n//                     {parsedList.map(task => (\r\n//                         <TaskCard key={task.id} task={task} onDelete={() => this.deleteTask(task.id)} />\r\n//                     ))}\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Task;\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport './index.css';\r\nimport TaskCard from \"../TaskCard\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport bg from './icons/bg1.avif'\r\n\r\nclass Task extends Component {\r\n    state = {\r\n        taskArray: [],\r\n        taskText: \"\",\r\n    };\r\n\r\n    componentDidMount() {\r\n        const parsedList = JSON.parse(localStorage.getItem(\"TaskList\"));\r\n        if (parsedList) {\r\n            this.setState({ taskArray: parsedList });\r\n        }\r\n    }\r\n\r\n    makeTask = (event) => {\r\n        this.setState({ taskText: event.target.value });\r\n    };\r\n\r\n    DumpToLocal = (taskArray) => {\r\n        localStorage.setItem(\"TaskList\", JSON.stringify(taskArray));\r\n    };\r\n\r\n    saveTask = () => {\r\n        const { taskArray,  taskText } = this.state;\r\n        const taskDate = new Date();\r\n        const taskCreated = taskDate.toLocaleTimeString();\r\n        const taskList = {\r\n            taskText,\r\n            taskCreated,\r\n            id:uuidv4()\r\n        };\r\n\r\n        const updatedTaskArray = [...taskArray, taskList];\r\n        this.setState({ taskArray: updatedTaskArray });\r\n\r\n        this.DumpToLocal(updatedTaskArray); // Store to localStorage immediately\r\n\r\n        // Clear input field after saving task\r\n        this.setState({ taskText: \"\" });\r\n    };\r\n\r\n    deleteTask = (taskId) => {\r\n        const updatedTaskArray = this.state.taskArray.filter(task => task.id !== taskId);\r\n        this.setState({ taskArray: updatedTaskArray });\r\n        this.DumpToLocal(updatedTaskArray); // Update localStorage after deleting task\r\n    };\r\n\r\n    render() {\r\n        const { taskText, taskArray } = this.state;\r\n        return (\r\n            <div className=\"tasks-container\" style={{backgroundImage:`url(${bg})`, backgroundSize:\"cover\"}}>\r\n                <h1>Task</h1>\r\n                <div className=\"content-3\">\r\n                    <input type=\"text\" className=\"input-element\" placeholder=\"Make Tasks.. by using 100 words\" value={taskText} onChange={this.makeTask} />\r\n                    <button className=\"taskAdd-btn\" onClick={this.saveTask}>Save</button>\r\n                </div>\r\n                <div className=\"array\">\r\n                    {taskArray.map(task => (\r\n                        <TaskCard key={task.id} task={task} onDelete={() => this.deleteTask(task.id)} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}